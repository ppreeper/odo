#!/usr/bin/env bash
# This script was generated by bashly 1.0.5 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
	printf "bash version 4 or higher is required\n" >&2
	exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
	echo "$version"
}

# :command.usage
odo_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo - Odoo Podman Tool\n"
		echo

	else
		printf "odo - Odoo Podman Tool\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo COMMAND\n"
	printf "  odo [COMMAND] --help | -h\n"
	printf "  odo --version | -v\n"
	echo
	# :command.usage_commands
	printf "%s\n" "Commands:"
	printf "  %s   additional config options\n" "config     "
	printf "  %s   Generate bash completions\n" "completions"
	printf "  %s   Start the instance\n" "start      "
	printf "  %s   Stop the instance\n" "stop       "
	printf "  %s   Restart the instance\n" "restart    "
	printf "  %s   Follow the logs\n" "logs       "
	printf "  %s   Generates an Odoo module skeleton in addons\n" "scaffold   "
	printf "  %s   initialize the database\n" "init       "
	printf "  %s   Install module(s)\n" "install    "
	printf "  %s   Upgrade module(s)\n" "upgrade    "
	printf "  %s   export import module manifest\n" "manifest   "
	printf "  %s   Access the raw database\n" "psql       "
	printf "  %s   Query the database\n" "query      "
	printf "  %s   Backup database filestore and addons\n" "backup     "
	printf "  %s   Restore database and filestore or addons\n" "restore    "
	printf "  %s   Admin user management\n" "admin      "
	printf "  %s   Project level commands [CAUTION]\n" "project    "
	printf "  %s   Odoo community and enterprise repository management\n" "repo       "
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo
		printf "  %s\n" "--version, -v"
		printf "    Show version number\n"
		echo

		# :command.usage_environment_variables
		printf "%s\n" "Environment Variables:"

		# :environment_variable.usage
		printf "  %s\n" "POD"
		printf "    Odoo instance\n"
		printf "    Default: ${PWD##*/}\n"
		echo

		# :environment_variable.usage
		printf "  %s\n" "CONTAINER"
		printf "    Container image\n"
		printf "    Default: ghcr.io/ppreeper/odoobase:main\n"
		echo

	fi
}

# :command.usage
odo_config_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo config - additional config options\n"
		echo

	else
		printf "odo config - additional config options\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo config COMMAND\n"
	printf "  odo config [COMMAND] --help | -h\n"
	echo
	# :command.usage_commands
	printf "%s\n" "Commands:"
	printf "  %s   Setup vscode settings and launch json files\n" "vscode "
	printf "  %s   Setup pyright settings\n" "pyright"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

	fi
}

# :command.usage
odo_config_vscode_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo config vscode - Setup vscode settings and launch json files\n"
		echo

	else
		printf "odo config vscode - Setup vscode settings and launch json files\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo config vscode\n"
	printf "  odo config vscode --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

	fi
}

# :command.usage
odo_config_pyright_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo config pyright - Setup pyright settings\n"
		echo

	else
		printf "odo config pyright - Setup pyright settings\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo config pyright\n"
	printf "  odo config pyright --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

	fi
}

# :command.usage
odo_completions_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo completions - Generate bash completions\n"
		echo

	else
		printf "odo completions - Generate bash completions\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo completions COMMAND\n"
	printf "  odo completions [COMMAND] --help | -h\n"
	echo
	# :command.usage_commands
	printf "%s\n" "Commands:"
	printf "  %s   Show bash completions\n" "show   "
	printf "  %s   Install bash completions to ${HOME}/.local/share/bash-completions/completions/odo.bash\n" "install"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

	fi
}

# :command.usage
odo_completions_show_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo completions show\n"
		echo

		printf "  Show bash completions\n  Usage: eval \"\$(odo completions)\"\n"
		echo

	else
		printf "odo completions show - Show bash completions\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo completions show\n"
	printf "  odo completions show --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

	fi
}

# :command.usage
odo_completions_install_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo completions install - Install bash completions to ${HOME}/.local/share/bash-completions/completions/odo.bash\n"
		echo

	else
		printf "odo completions install - Install bash completions to ${HOME}/.local/share/bash-completions/completions/odo.bash\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo completions install\n"
	printf "  odo completions install --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

	fi
}

# :command.usage
odo_start_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo start - Start the instance\n"
		echo

	else
		printf "odo start - Start the instance\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo start\n"
	printf "  odo start --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  oda start\n"
		echo

	fi
}

# :command.usage
odo_stop_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo stop - Stop the instance\n"
		echo

	else
		printf "odo stop - Stop the instance\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo stop\n"
	printf "  odo stop --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  oda stop\n"
		echo

	fi
}

# :command.usage
odo_restart_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo restart - Restart the instance\n"
		echo

	else
		printf "odo restart - Restart the instance\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo restart\n"
	printf "  odo restart --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  oda stop\n"
		echo

	fi
}

# :command.usage
odo_logs_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo logs - Follow the logs\n"
		echo

	else
		printf "odo logs - Follow the logs\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo logs\n"
	printf "  odo logs --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  oda logs\n"
		echo

	fi
}

# :command.usage
odo_scaffold_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo scaffold - Generates an Odoo module skeleton in addons\n"
		echo

	else
		printf "odo scaffold - Generates an Odoo module skeleton in addons\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo scaffold MODULE\n"
	printf "  odo scaffold --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "MODULE"
		printf "    Name of the module to create\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  oda scaffold module_ext\n"
		echo

	fi
}

# :command.usage
odo_init_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo init - initialize the database\n"
		echo

	else
		printf "odo init - initialize the database\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo init [MODULES] [OPTIONS]\n"
	printf "  odo init --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_flags
		# :flag.usage
		printf "  %s\n" "--name, -d NAME"
		printf "    Database Name\n"
		printf "    Default: $(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "MODULES"
		printf "    comma seperated list of modules\n"
		printf "    Default: base,web\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  oda init\n"
		echo

	fi
}

# :command.usage
odo_install_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo install - Install module(s)\n"
		echo

	else
		printf "odo install - Install module(s)\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo install MODULES [OPTIONS]\n"
	printf "  odo install --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_flags
		# :flag.usage
		printf "  %s\n" "--name, -d NAME"
		printf "    Database Name\n"
		printf "    Default: $(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "MODULES"
		printf "    comma seperated list of modules\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  oda install base,web\n"
		echo

	fi
}

# :command.usage
odo_upgrade_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo upgrade - Upgrade module(s)\n"
		echo

	else
		printf "odo upgrade - Upgrade module(s)\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo upgrade MODULES [OPTIONS]\n"
	printf "  odo upgrade --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_flags
		# :flag.usage
		printf "  %s\n" "--name, -d NAME"
		printf "    Database Name\n"
		printf "    Default: $(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "MODULES"
		printf "    comma seperated list of modules\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  oda upgrade base,web\n"
		echo

	fi
}

# :command.usage
odo_manifest_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo manifest - export import module manifest\n"
		echo

	else
		printf "odo manifest - export import module manifest\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo manifest COMMAND\n"
	printf "  odo manifest [COMMAND] --help | -h\n"
	echo
	# :command.usage_commands
	printf "%s\n" "Commands:"
	printf "  %s   export manifest.json\n" "export"
	printf "  %s   import manifest.json\n" "import"
	printf "  %s   download manifest from backup\n" "remote"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

	fi
}

# :command.usage
odo_manifest_export_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo manifest export - export manifest.json\n"
		echo

	else
		printf "odo manifest export - export manifest.json\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo manifest export\n"
	printf "  odo manifest export --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

	fi
}

# :command.usage
odo_manifest_import_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo manifest import - import manifest.json\n"
		echo

	else
		printf "odo manifest import - import manifest.json\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo manifest import [FILE]\n"
	printf "  odo manifest import --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "FILE"
		printf "    manifest file to read\n"
		printf "    Default: manifest.json\n"
		echo

	fi
}

# :command.usage
odo_manifest_remote_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo manifest remote - download manifest from backup\n"
		echo

	else
		printf "odo manifest remote - download manifest from backup\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo manifest remote FILE\n"
	printf "  odo manifest remote --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "FILE"
		printf "    backup file to read\n"
		echo

	fi
}

# :command.usage
odo_psql_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo psql - Access the raw database\n"
		echo

	else
		printf "odo psql - Access the raw database\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo psql [OPTIONS]\n"
	printf "  odo psql --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_flags
		# :flag.usage
		printf "  %s\n" "--host HOST"
		printf "    Database Host\n"
		printf "    Default: $(grep db_host conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :flag.usage
		printf "  %s\n" "--port PORT"
		printf "    Database Port\n"
		printf "    Default: $(grep db_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :flag.usage
		printf "  %s\n" "--user USERNAME"
		printf "    Username\n"
		printf "    Default: $(grep db_user conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :flag.usage
		printf "  %s\n" "--pass PASS"
		printf "    Password\n"
		printf "    Default: $(grep db_pass conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :flag.usage
		printf "  %s\n" "--name NAME"
		printf "    Database Name\n"
		printf "    Default: $(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  oda psql\n"
		echo

	fi
}

# :command.usage
odo_query_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo query - Query the database\n"
		echo

	else
		printf "odo query - Query the database\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo query MODEL [OPTIONS]\n"
	printf "  odo query --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_flags
		# :flag.usage
		printf "  %s\n" "--db_name DATABASE"
		printf "    Database Name\n"
		printf "    Default: $(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :flag.usage
		printf "  %s\n" "-U USERNAME"
		printf "    Odoo username\n"
		printf "    Default: admin\n"
		echo

		# :flag.usage
		printf "  %s\n" "-P PASSWORD"
		printf "    Odoo password\n"
		printf "    Default: admin\n"
		echo

		# :flag.usage
		printf "  %s\n" "--filter FILTER"
		printf "    Model domain filter\n"
		printf "    Default: \n"
		echo

		# :flag.usage
		printf "  %s\n" "--fields FIELDS"
		printf "    Model fields to show\n"
		echo

		# :flag.usage
		printf "  %s\n" "--limit LIMIT"
		printf "    Limit on records returned\n"
		echo

		# :flag.usage
		printf "  %s\n" "--offset OFFSET"
		printf "    Offset of records returned\n"
		echo

		# :flag.usage
		printf "  %s\n" "--count"
		printf "    Count matching records\n"
		echo

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "MODEL"
		printf "    odoo model to be queried\n"
		echo

	fi
}

# :command.usage
odo_backup_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo backup - Backup database filestore and addons\n"
		echo

	else
		printf "odo backup - Backup database filestore and addons\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo backup\n"
	printf "  odo backup --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  oda backup\n"
		echo

	fi
}

# :command.usage
odo_restore_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo restore - Restore database and filestore or addons\n"
		echo

	else
		printf "odo restore - Restore database and filestore or addons\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo restore FILE...\n"
	printf "  odo restore --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "FILE..."
		printf "    Path to backup file\n"
		echo

	fi
}

# :command.usage
odo_admin_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo admin - Admin user management\n"
		echo

	else
		printf "odo admin - Admin user management\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo admin [OPTIONS] COMMAND\n"
	printf "  odo admin [COMMAND] --help | -h\n"
	echo
	# :command.usage_commands
	printf "%s\n" "Commands:"
	printf "  %s   Odoo Admin username\n" "user    "
	printf "  %s   Odoo Admin password\n" "password"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_flags
		# :flag.usage
		printf "  %s\n" "--host HOST"
		printf "    Database Host\n"
		printf "    Default: $(grep db_host conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :flag.usage
		printf "  %s\n" "--port PORT"
		printf "    Database Port\n"
		printf "    Default: $(grep db_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :flag.usage
		printf "  %s\n" "--db_user DB_USERNAME"
		printf "    Username\n"
		printf "    Default: $(grep db_user conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :flag.usage
		printf "  %s\n" "--db_pass DB_PASS"
		printf "    Password\n"
		printf "    Default: $(grep db_pass conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :flag.usage
		printf "  %s\n" "--db_name DB_NAME"
		printf "    Database Name\n"
		printf "    Default: $(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

	fi
}

# :command.usage
odo_admin_user_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo admin user - Odoo Admin username\n"
		echo

	else
		printf "odo admin user - Odoo Admin username\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo admin user [ADMIN_NAME]\n"
	printf "  odo admin user --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "ADMIN_NAME"
		printf "    Odoo Admin username\n"
		echo

	fi
}

# :command.usage
odo_admin_password_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo admin password - Odoo Admin password\n"
		echo

	else
		printf "odo admin password - Odoo Admin password\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo admin password ADMIN_PASSWORD\n"
	printf "  odo admin password --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "ADMIN_PASSWORD"
		printf "    Odoo Admin password\n"
		echo

	fi
}

# :command.usage
odo_project_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo project - Project level commands [CAUTION]\n"
		echo

	else
		printf "odo project - Project level commands [CAUTION]\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo project COMMAND\n"
	printf "  odo project [COMMAND] --help | -h\n"
	echo
	# :command.usage_commands
	printf "%s\n" "Commands:"
	printf "  %s   Create a new project specifying Odoo version, Odoo Port, PostgreSQL port\n" "init  "
	printf "  %s   branch a project from git repository and setup for dev environ\n" "branch"
	printf "  %s   Drop database and filestore [CAUTION]\n" "reset "
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_environment_variables
		printf "%s\n" "Environment Variables:"

		# :environment_variable.usage
		printf "  %s\n" "ODOOBASE"
		printf "\n"
		printf "    Default: ${HOME}/workspace/repos/odoo\n"
		echo

	fi
}

# :command.usage
odo_project_init_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo project init - Create a new project specifying Odoo version, Odoo Port, PostgreSQL port\n"
		echo

	else
		printf "odo project init - Create a new project specifying Odoo version, Odoo Port, PostgreSQL port\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo project init EDITION VERSION PROJECTNAME [OPORT] [GPORT] [PGPORT]\n"
	printf "  odo project init --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "EDITION"
		printf "    Odoo edition\n"
		printf "    Allowed: community, enterprise\n"
		echo

		# :argument.usage
		printf "  %s\n" "VERSION"
		printf "    Odoo Version\n"
		echo

		# :argument.usage
		printf "  %s\n" "PROJECTNAME"
		printf "    name of the project\n"
		echo

		# :argument.usage
		printf "  %s\n" "OPORT"
		printf "    Odoo Port\n"
		printf "    Default: 8069\n"
		echo

		# :argument.usage
		printf "  %s\n" "GPORT"
		printf "    Odoo IM Port\n"
		printf "    Default: 8072\n"
		echo

		# :argument.usage
		printf "  %s\n" "PGPORT"
		printf "    PostgreSQL Port\n"
		printf "    Default: 5432\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  oda project init community 16.0 odooproject\n"
		printf "  oda project init community 16.0 odooproject 8080\n"
		printf "  oda project init enterprise 17.0 odooproject 8080 5444\n"
		echo

	fi
}

# :command.usage
odo_project_branch_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo project branch - branch a project from git repository and setup for dev environ\n"
		echo

	else
		printf "odo project branch - branch a project from git repository and setup for dev environ\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo project branch VERSION EDITION PROJECTNAME BRANCH URL [OPORT] [GPORT] [PGPORT]\n"
	printf "  odo project branch --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "VERSION"
		printf "    Odoo Version\n"
		echo

		# :argument.usage
		printf "  %s\n" "EDITION"
		printf "    Odoo edition\n"
		printf "    Allowed: community, enterprise\n"
		echo

		# :argument.usage
		printf "  %s\n" "PROJECTNAME"
		printf "    name of the project\n"
		echo

		# :argument.usage
		printf "  %s\n" "BRANCH"
		printf "    branch to pull from the repository\n"
		echo

		# :argument.usage
		printf "  %s\n" "URL"
		printf "    url of the repository\n"
		echo

		# :argument.usage
		printf "  %s\n" "OPORT"
		printf "    Odoo Port\n"
		printf "    Default: 8069\n"
		echo

		# :argument.usage
		printf "  %s\n" "GPORT"
		printf "    Odoo IM Port\n"
		printf "    Default: 8072\n"
		echo

		# :argument.usage
		printf "  %s\n" "PGPORT"
		printf "    PostgreSQL Port\n"
		printf "    Default: 5432\n"
		echo

	fi
}

# :command.usage
odo_project_reset_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo project reset - Drop database and filestore [CAUTION]\n"
		echo

	else
		printf "odo project reset - Drop database and filestore [CAUTION]\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo project reset [OPTIONS]\n"
	printf "  odo project reset --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_flags
		# :flag.usage
		printf "  %s\n" "--host HOST"
		printf "    Database Host\n"
		printf "    Default: $(grep db_host conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :flag.usage
		printf "  %s\n" "--port PORT"
		printf "    Database Port\n"
		printf "    Default: $(grep db_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :flag.usage
		printf "  %s\n" "--user USERNAME"
		printf "    Username\n"
		printf "    Default: $(grep db_user conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :flag.usage
		printf "  %s\n" "--pass PASS"
		printf "    Password\n"
		printf "    Default: $(grep db_pass conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :flag.usage
		printf "  %s\n" "--name NAME"
		printf "    Database Name\n"
		printf "    Default: $(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  oda project reset\n"
		echo

	fi
}

# :command.usage
odo_repo_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo repo - Odoo community and enterprise repository management\n"
		echo

	else
		printf "odo repo - Odoo community and enterprise repository management\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo repo COMMAND\n"
	printf "  odo repo [COMMAND] --help | -h\n"
	echo
	# :command.usage_commands
	printf "%s\n" "Commands:"
	printf "  %s   manage the Odoo base source repository\n" "base   "
	printf "  %s   manage the Odoo branch version repository\n" "version"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_environment_variables
		printf "%s\n" "Environment Variables:"

		# :environment_variable.usage
		printf "  %s\n" "ODOOBASE"
		printf "\n"
		printf "    Default: ${HOME}/workspace/repos/odoo\n"
		echo

	fi
}

# :command.usage
odo_repo_base_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo repo base - manage the Odoo base source repository\n"
		echo

	else
		printf "odo repo base - manage the Odoo base source repository\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo repo base COMMAND\n"
	printf "  odo repo base [COMMAND] --help | -h\n"
	echo
	# :command.usage_commands
	printf "%s\n" "Commands:"
	printf "  %s   clone the Odoo source repository\n" "clone "
	printf "  %s   update the Odoo source repository\n" "update"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

	fi
}

# :command.usage
odo_repo_base_clone_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo repo base clone - clone the Odoo source repository\n"
		echo

	else
		printf "odo repo base clone - clone the Odoo source repository\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo repo base clone\n"
	printf "  odo repo base clone --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

	fi
}

# :command.usage
odo_repo_base_update_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo repo base update - update the Odoo source repository\n"
		echo

	else
		printf "odo repo base update - update the Odoo source repository\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo repo base update\n"
	printf "  odo repo base update --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

	fi
}

# :command.usage
odo_repo_version_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo repo version - manage the Odoo branch version repository\n"
		echo

	else
		printf "odo repo version - manage the Odoo branch version repository\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo repo version COMMAND\n"
	printf "  odo repo version [COMMAND] --help | -h\n"
	echo
	# :command.usage_commands
	printf "%s\n" "Commands:"
	printf "  %s   clone Odoo version repository\n" "clone "
	printf "  %s   update Odoo version repository\n" "update"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

	fi
}

# :command.usage
odo_repo_version_clone_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo repo version clone - clone Odoo version repository\n"
		echo

	else
		printf "odo repo version clone - clone Odoo version repository\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo repo version clone VERSION\n"
	printf "  odo repo version clone --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "VERSION"
		printf "    Odoo Version\n"
		echo

	fi
}

# :command.usage
odo_repo_version_update_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo repo version update - update Odoo version repository\n"
		echo

	else
		printf "odo repo version update - update Odoo version repository\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo repo version update VERSION\n"
	printf "  odo repo version update --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "VERSION"
		printf "    Odoo Version\n"
		echo

	fi
}

# :command.normalize_input
normalize_input() {
	local arg flags

	while [[ $# -gt 0 ]]; do
		arg="$1"
		if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
			input+=("${BASH_REMATCH[1]}")
			input+=("${BASH_REMATCH[2]}")
		elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
			input+=("${BASH_REMATCH[1]}")
			input+=("${BASH_REMATCH[2]}")
		elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
			flags="${BASH_REMATCH[1]}"
			for ((i = 0; i < ${#flags}; i++)); do
				input+=("-${flags:i:1}")
			done
		else
			input+=("$arg")
		fi

		shift
	done
}
# :command.inspect_args
inspect_args() {
	if ((${#args[@]})); then
		readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
		echo args:
		for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
	else
		echo args: none
	fi

	if ((${#other_args[@]})); then
		echo
		echo other_args:
		echo "- \${other_args[*]} = ${other_args[*]}"
		for i in "${!other_args[@]}"; do
			echo "- \${other_args[$i]} = ${other_args[$i]}"
		done
	fi

	if ((${#deps[@]})); then
		readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
		echo
		echo deps:
		for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
	fi

}

# :command.user_lib
# src/lib/send_completions.sh
send_completions() {
	echo $'# odo completion                                           -*- shell-script -*-'
	echo $''
	echo $'# This bash completions script was generated by'
	echo $'# completely (https://github.com/dannyben/completely)'
	echo $'# Modifying it manually is not recommended'
	echo $''
	echo $'_odo_completions_filter() {'
	echo $'  local words="$1"'
	echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
	echo $'  local result=()'
	echo $''
	echo $'  if [[ "${cur:0:1}" == "-" ]]; then'
	echo $'    echo "$words"'
	echo $'  '
	echo $'  else'
	echo $'    for word in $words; do'
	echo $'      [[ "${word:0:1}" != "-" ]] && result+=("$word")'
	echo $'    done'
	echo $''
	echo $'    echo "${result[*]}"'
	echo $''
	echo $'  fi'
	echo $'}'
	echo $''
	echo $'_odo_completions() {'
	echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
	echo $'  local compwords=("${COMP_WORDS[@]:1:$COMP_CWORD-1}")'
	echo $'  local compline="${compwords[*]}"'
	echo $''
	echo $'  case "$compline" in'
	echo $'    \'repo version update\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'completions install\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'repo version clone\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'completions show\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'repo base update\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'manifest import\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'repo base clone\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'manifest remote\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'manifest export\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'admin\'*\'password\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'project branch\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h community enterprise")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'config pyright\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'config vscode\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'project reset\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help --host --name --pass --port --user -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'repo version\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h clone update")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'project init\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h community enterprise")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'admin\'*\'user\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'completions\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h install show")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'repo base\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h clone update")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'scaffold\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'manifest\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h export import remote")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'restart\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'restore\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'project\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h branch init reset")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'install\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help --name -d -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'upgrade\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help --name -d -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'backup\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'config\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h pyright vscode")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'query\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--count --db_name --fields --filter --help --limit --offset -P -U -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'admin\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--db_name --db_pass --db_user --help --host --port -h password user")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'start\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'psql\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help --host --name --pass --port --user -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'init\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help --name -d -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'logs\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'stop\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    \'repo\'*)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help -h base version")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'    *)'
	echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_odo_completions_filter "--help --version -h -v admin backup completions config init install logs manifest project psql query repo restart restore scaffold start stop upgrade")" -- "$cur" )'
	echo $'      ;;'
	echo $''
	echo $'  esac'
	echo $'} &&'
	echo $'complete -F _odo_completions odo'
	echo $''
	echo $'# ex: filetype=sh'
}

# :command.command_functions

# :command.function
odo_config_vscode_command() {
	# src/config_vscode_command.sh
	function launch_json(){
	[ -z ${2} ] && export PORT=8069 || export PORT=${2}
	cat <<-_EOF_ | tee .vscode/launch.json > /dev/null
	{
		"version": "0.2.0",
		"configurations": [
			{
				"name": "Launch",
				"type": "python",
				"request": "launch",
				"stopOnEntry": false,
				"python": "\${command:python.interpreterPath}",
				"program": "\${workspaceRoot}/odoo/odoo-bin",
				"args": ["-c", "\${workspaceRoot}/conf/odoo.conf","-p","$ODOO_PORT"],
				"cwd": "\${workspaceRoot}",
				"env": {},
				"envFile": "\${workspaceFolder}/.env",
				"console": "integratedTerminal"
			}
		]
	}
	_EOF_
	}

	function settings_json(){
	[ -z ${1} ] && export PORT=8069 || export PORT=${1}
	cat <<-_EOF_ | tee .vscode/settings.json > /dev/null
	{
		"python.analysis.extraPaths": ["${2}", "${3}"],
		"python.linting.pylintEnabled": true,
		"python.linting.enabled": true,
		"python.terminal.executeInFileDir": true,
		"python.formatting.provider": "black"
	}
	_EOF_
	}

	if [[ -f "./conf/odoo.conf" ]]; then
		if [ -z $ODOO_PORT ]; then
			if [[ -f ".envrc" ]]; then
				export ODOO_PORT=$(grep ODOO_PORT .envrc | awk '{print $2}' | awk -F'=' '{print $2}')
			else
				export ODOO_PORT=$(grep http_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')
			fi
		fi
		[ -z ${ODOO_C} ] && export ODOO_C="odoo"
		[ -z ${ODOO_E} ] && export ODOO_E="enterprise"

		mkdir -p .vscode
		settings_json $ODOO_PORT $ODOO_C $ODOO_E
		launch_json
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_config_pyright_command() {
	# src/config_pyright_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		[ -z ${ODOO_C} ] && export ODOO_C="odoo"
		[ -z ${ODOO_E} ] && export ODOO_E="enterprise"

	cat <<-_EOF_ | tee pyrightconfig.json > /dev/null
	{
		"venvPath": ".",
		"venv": ".direnv",
		"executionEnvironments": [
			{
				"root": ".",
				"extraPaths": [
					"${ODOO_C}",
					"${ODOO_E}",
					"addons"
					]
			}
		]
	}
	_EOF_

	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_completions_show_command() {
	# src/completions_show_command.sh
	send_completions
}

# :command.function
odo_completions_install_command() {
	# src/completions_install_command.sh
	CDIR="${HOME}/.local/share/bash-completion/completions"
	mkdir -p ${CDIR}
	send_completions | tee ${CDIR}/odo.bash >/dev/null
}

# :command.function
odo_start_command() {
	# src/start_command.sh
	function startOdoo(){
	if [ -z $ODOO_PORT ]; then
			if [[ -f ".envrc" ]]; then
				export ODOO_PORT=$(grep ODOO_PORT .envrc | awk '{print $2}' | awk -F'=' '{print $2}')
			else
				export ODOO_PORT=$(grep http_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')
			fi
		fi
		if [ -z $ODOO_IM_PORT ]; then
			if [[ -f ".envrc" ]]; then
				export ODOO_IM_PORT=$(grep ODOO_IM_PORT .envrc | awk '{print $2}' | awk -F'=' '{print $2}')
			else
				export ODOO_IM_PORT=$(grep longpolling_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')
				export ODOO_IM_PORT=$(grep gevent_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')
			fi
		fi

		V_CONF="-v ${PWD}/conf:/opt/odoo/conf"
		V_ODOO_C="-v ${ODOO_C}:/opt/odoo/odoo"
		ADDON_E=$(grep addons_path conf/odoo.conf | awk -F '=' '{print $2}' | awk -F',' '{print $2}')
		if [[ $ADDON_E == *"enterprise" ]]; then
			V_ODOO_E="-v ${ODOO_E}:/opt/odoo/enterprise"
		fi
		V_ADDONS="-v ${PWD}/addons:/opt/odoo/addons"
		V_DATA="-v ${1}_data:/opt/odoo/data"
		V_BACKUPS="-v ${PWD}/backups:/opt/odoo/backups"

		podman run --rm --name ${1} -p ${ODOO_PORT}:8069 -p ${ODOO_IM_PORT}:8072 ${V_CONF} ${V_ODOO_C} ${V_ODOO_E} ${V_ADDONS} ${V_DATA} ${V_BACKUPS} -d ${CONTAINER}
	}

	if [[ -f "./conf/odoo.conf" ]]; then
		startOdoo ${POD}
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_stop_command() {
	# src/stop_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		podman stop ${POD} || echo
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_restart_command() {
	# src/restart_command.sh
	function startOdoo(){
	if [ -z $ODOO_PORT ]; then
			if [[ -f ".envrc" ]]; then
				export ODOO_PORT=$(grep ODOO_PORT .envrc | awk '{print $2}' | awk -F'=' '{print $2}')
			else
				export ODOO_PORT=$(grep http_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')
			fi
		fi
		if [ -z $ODOO_IM_PORT ]; then
			if [[ -f ".envrc" ]]; then
				export ODOO_IM_PORT=$(grep ODOO_IM_PORT .envrc | awk '{print $2}' | awk -F'=' '{print $2}')
			else
				export ODOO_IM_PORT=$(grep longpolling_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')
				export ODOO_IM_PORT=$(grep gevent_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')
			fi
		fi

		V_CONF="-v ${PWD}/conf:/opt/odoo/conf"
		V_ODOO_C="-v ${ODOO_C}:/opt/odoo/odoo"
		ADDON_E=$(grep addons_path conf/odoo.conf | awk -F '=' '{print $2}' | awk -F',' '{print $2}')
		if [[ $ADDON_E == *"enterprise" ]]; then
			V_ODOO_E="-v ${ODOO_E}:/opt/odoo/enterprise"
		fi
		V_ADDONS="-v ${PWD}/addons:/opt/odoo/addons"
		V_DATA="-v ${1}_data:/opt/odoo/data"
		V_BACKUPS="-v ${PWD}/backups:/opt/odoo/backups"

		podman run --rm --name ${1} -p ${ODOO_PORT}:8069 -p ${ODOO_IM_PORT}:8072 ${V_CONF} ${V_ODOO_C} ${V_ODOO_E} ${V_ADDONS} ${V_DATA} ${V_BACKUPS} -d ${CONTAINER}
	}

	if [[ -f "./conf/odoo.conf" ]]; then
		podman stop "${POD}" || echo
		sleep 2
		startOdoo ${POD}
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_logs_command() {
	# src/logs_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		podman logs -f ${POD}
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_scaffold_command() {
	# src/scaffold_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		podman exec ${POD} odoo/odoo-bin scaffold ${args[module]} /opt/odoo/addons/.
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_init_command() {
	# src/init_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		podman exec ${POD} odoo/odoo-bin --no-http --stop-after-init -i ${args[modules]}
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_install_command() {
	# src/install_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		podman exec ${POD} odoo/odoo-bin --no-http --stop-after-init -i ${args[modules]}
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_upgrade_command() {
	# src/upgrade_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		podman exec ${POD} odoo/odoo-bin --no-http --stop-after-init -u ${args[modules]}
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_manifest_export_command() {
	# src/manifest_export_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		podman exec ${POD} oda_db.py -e
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_manifest_import_command() {
	# src/manifest_import_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		podman exec ${POD} oda_db.py -i
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_manifest_remote_command() {
	# src/manifest_remote_command.sh
	tar Oaxf /opt/odoo/${args[file]} ./manifest.json > /opt/odoo/backups/manifest.json
}

# :command.function
odo_psql_command() {
	# src/psql_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		psql postgres://${args[--user]}:${args[--pass]}@${args[--host]}:${args[--port]}/${args[--name]}
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_query_command() {
	# src/query_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		if [ -z $ODOO_PORT ]; then
			if [[ -f ".envrc" ]]; then
				export ODOO_PORT=$(grep ODOO_PORT .envrc | awk '{print $2}' | awk -F'=' '{print $2}')
			else
				export ODOO_PORT=$(grep http_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')
			fi
		fi

		EXEC="odooquery -host localhost -port ${ODOO_PORT} -d ${args[--db_name]} -U ${args[-U]} -P ${args[-P]} -model ${args[model]}"
		[ -z ${args[--filter]} ] || EXEC="${EXEC} -filter \"${args[--filter]}\""
		[ -z ${args[--fields]} ] || EXEC="${EXEC} -fields ${args[--fields]}"
		[ -z ${args[--limit]} ] || EXEC="${EXEC} -limit ${args[--limit]}"
		[ -z ${args[--offset]} ] || EXEC="${EXEC} -offset ${args[--offset]}"
		[ -z ${args[--count]} ] || EXEC="${EXEC} -count"
		${EXEC}
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_backup_command() {
	# src/backup_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		podman exec ${POD} oda_db.py -b
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_restore_command() {
	# src/restore_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		for bfile in ${args[file]}
		do
			podman exec ${POD} oda_db.py -r -d "${bfile}"
		done
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_admin_user_command() {
	# src/admin_user_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		if [ -z "${args[admin_name]}" ]; then
			admin_user=$(psql postgres://${args[--db_user]}:${args[--db_pass]}@${args[--host]}:${args[--port]}/${args[--db_name]} -t -c "select login from res_users where id=2;")
			echo "Odoo Admin username: $(echo $admin_user || awk '{print $1}')"
		else
			read -r -p "Are you sure you want to change the admin username to: ${args[admin_name]} [YES/N] " response
			if [[ "$response" =~ ^(YES)$ ]]; then
				read -r -p "Are you sure you want to change the admin username to: ${args[admin_name]} [YES/N] " response
				if [[ "$response" =~ ^(YES)$ ]]; then
					echo "changing username to: ${args[admin_name]}"
					admin_user=$(psql postgres://${args[--db_user]}:${args[--db_pass]}@${args[--host]}:${args[--port]}/${args[--db_name]} -t -c "update res_users set login='${args[admin_name]}' where id=2;")
				fi
			fi
		fi
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_admin_password_command() {
	# src/admin_password_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		read -r -p "Are you sure you want to change the admin password [YES/N] " response
		if [[ "$response" =~ ^(YES)$ ]]; then
			read -r -p "Are you sure you want to change the admin password [YES/N] " response
			if [[ "$response" =~ ^(YES)$ ]]; then
				admin_password=$(podman exec atest oda_db.py -p ${args[admin_password]})
				psql postgres://${args[--db_user]}:${args[--db_pass]}@${args[--host]}:${args[--port]}/${args[--db_name]} -t -c "update res_users set password='${admin_password}' where id=2;" >/dev/null
			fi
		fi
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_project_init_command() {
	# src/project_init_command.sh
	function envrc(){
	[ -z ${2} ] && export PORT=8069 || export PORT=${2}
	[ -z ${3} ] && export IM_PORT=8072 || export IM_PORT=${3}
	cat <<-_EOF_ | tee .envrc > /dev/null
	layout python3
	export ODOO_V=${1}
	export ODOO_PORT=${PORT}
	export ODOO_IM_PORT=${IM_PORT}
	export ODOO_C=\${HOME}/workspace/repos/odoo/${1}/odoo
	export ODOO_E=\${HOME}/workspace/repos/odoo/${1}/enterprise
	_EOF_
	}

	function configfile(){
	if [[ "${2}" == "enterprise" ]]; then
		EPATH="/opt/odoo/enterprise,"
	else
		EPATH=""
	fi
	cat <<-_EOF_ | tee conf/odoo.conf > /dev/null
	[options]
	addons_path = /opt/odoo/odoo/addons,${EPATH}/opt/odoo/addons
	data_dir = /opt/odoo/data
	admin_passwd = adminadmin
	without_demo = all
	csv_internal_sep = ;
	server_wide_modules = base,web
	db_host = ${IPV4}
	db_port = 5432
	db_maxconn = 24
	db_user = odoodev
	db_password = odooodoo
	db_name = ${3}
	db_template = template0
	db_sslmode = disable
	list_db = False
	proxy = True
	proxy_mode = True
	http_enable = True
	http_interface =
	http_port = 8069
	reportgz = False
	syslog = True
	log_level = debug
	# log_db_level = warning
	# log_handler = werkzeug:CRITICAL,odoo.api:DEBUG
	log_handler = odoo.tools.convert:DEBUG
	workers = 0
	#max_cron_threads = 2
	limit_memory_hard = 2684354560
	limit_memory_soft = 2147483648
	limit_request = 8192
	limit_time_cpu = 1200
	limit_time_real = 2400
	_EOF_
	}

	function pipfile(){
	cat <<-_EOF_ | tee Pipfile > /dev/null
	[[source]]
	url = "https://pypi.org/simple"
	verify_ssl = true
	name = "pypi"

	[packages]
	babel = "==2.9.1"
	chardet = "==3.0.4"
	cryptography = "==2.6.1"
	decorator = "==4.4.2"
	docutils = "==0.16"
	ebaysdk = "==2.1.5"
	freezegun = "==0.3.15"
	geoip2 = "==2.9.0"
	gevent = "==21.8.0"
	google-auth = "==2.17.*"
	greenlet = "==1.1.*"
	idna = "==2.8"
	jinja2 = "==2.11.3"
	libsass = "==0.18.0"
	lxml = "==4.6.5"
	markupsafe = "==1.1.0"
	num2words = "==0.5.6"
	ofxparse = "==0.21"
	paramiko = "==2.12.0"
	passlib = "==1.7.3"
	pillow = "==9.0.1"
	polib = "==1.1.0"
	"pdfminer.six" = "*"
	psutil = "==5.6.7"
	psycopg2-binary = "2.9.5"
	pydot = "==1.4.1"
	pyopenssl = "==19.0.0"
	pypdf2 = "==1.26.0"
	pyserial = "==3.4"
	python-dateutil = "==2.8.2"
	python-stdnum = "==1.13"
	pytz = "*"
	pyusb = "==1.0.2"
	qrcode = "==6.1"
	reportlab = "==3.5.59"
	requests = "==2.25.1"
	rjsmin = "==1.1.0"
	urllib3 = "==1.26.5"
	vobject = "==0.9.6.1"
	werkzeug = "==2.0.3"
	xlrd = "==1.2.0"
	xlsxwriter = "==1.1.2"
	xlwt = "==1.3.*"
	zeep = "==3.4.0"

	[dev-packages]
	black="*"
	yapf="*"
	pylint="*"
	pylint-odoo="*"

	[requires]
	python_version = "3"
	_EOF_
	}

	PDIR=${HOME}/workspace/odoo/${args[projectname]}
	mkdir -p ${PDIR}
	cd ${PDIR}
	envrc ${args[version]} ${args[oport]} ${args[gport]}
	direnv allow >/dev/null
	mkdir -p conf backups addons
	configfile ${args[version]} ${args[edition]} ${args[projectname]}
	pipfile
	printf "To install python dev dependencies run:\npipenv install --dev\n\n"
}

# :command.function
odo_project_branch_command() {
	# src/project_branch_command.sh
	function envrc(){
	[ -z ${2} ] && export PORT=8069 || export PORT=${2}
	[ -z ${3} ] && export IM_PORT=8072 || export IM_PORT=${3}
	cat <<-_EOF_ | tee .envrc > /dev/null
	layout python3
	export ODOO_V=${1}
	export ODOO_PORT=${PORT}
	export ODOO_IM_PORT=${IM_PORT}
	export ODOO_C=\${HOME}/workspace/repos/odoo/${1}/odoo
	export ODOO_E=\${HOME}/workspace/repos/odoo/${1}/enterprise
	_EOF_
	}

	function configfile(){
	if [[ "${2}" == "enterprise" ]]; then
		EPATH="/opt/odoo/enterprise,"
	else
		EPATH=""
	fi
	cat <<-_EOF_ | tee conf/odoo.conf > /dev/null
	[options]
	addons_path = /opt/odoo/odoo/addons,${EPATH}/opt/odoo/addons
	data_dir = /opt/odoo/data
	admin_passwd = adminadmin
	without_demo = all
	csv_internal_sep = ;
	server_wide_modules = base,web
	db_host = ${IPV4}
	db_port = 5432
	db_maxconn = 24
	db_user = odoodev
	db_password = odooodoo
	db_name = ${3}
	db_template = template0
	db_sslmode = disable
	list_db = False
	proxy = True
	proxy_mode = True
	http_enable = True
	http_interface =
	http_port = 8069
	reportgz = False
	syslog = True
	log_level = debug
	# log_db_level = warning
	# log_handler = werkzeug:CRITICAL,odoo.api:DEBUG
	log_handler = odoo.tools.convert:DEBUG
	workers = 0
	#max_cron_threads = 2
	limit_memory_hard = 2684354560
	limit_memory_soft = 2147483648
	limit_request = 8192
	limit_time_cpu = 1200
	limit_time_real = 2400
	_EOF_
	}

	function pipfile(){
	cat <<-_EOF_ | tee Pipfile > /dev/null
	[[source]]
	url = "https://pypi.org/simple"
	verify_ssl = true
	name = "pypi"

	[packages]
	babel = "==2.9.1"
	chardet = "==3.0.4"
	cryptography = "==2.6.1"
	decorator = "==4.4.2"
	docutils = "==0.16"
	ebaysdk = "==2.1.5"
	freezegun = "==0.3.15"
	geoip2 = "==2.9.0"
	gevent = "==21.8.0"
	google-auth = "==2.17.*"
	greenlet = "==1.1.*"
	idna = "==2.8"
	jinja2 = "==2.11.3"
	libsass = "==0.18.0"
	lxml = "==4.6.5"
	markupsafe = "==1.1.0"
	num2words = "==0.5.6"
	ofxparse = "==0.21"
	paramiko = "==2.12.0"
	passlib = "==1.7.3"
	pillow = "==9.0.1"
	polib = "==1.1.0"
	"pdfminer.six" = "*"
	psutil = "==5.6.7"
	psycopg2-binary = "2.9.5"
	pydot = "==1.4.1"
	pyopenssl = "==19.0.0"
	pypdf2 = "==1.26.0"
	pyserial = "==3.4"
	python-dateutil = "==2.8.2"
	python-stdnum = "==1.13"
	pytz = "*"
	pyusb = "==1.0.2"
	qrcode = "==6.1"
	reportlab = "==3.5.59"
	requests = "==2.25.1"
	rjsmin = "==1.1.0"
	urllib3 = "==1.26.5"
	vobject = "==0.9.6.1"
	werkzeug = "==2.0.3"
	xlrd = "==1.2.0"
	xlsxwriter = "==1.1.2"
	xlwt = "==1.3.*"
	zeep = "==3.4.0"

	[dev-packages]
	black="*"
	yapf="*"
	pylint="*"
	pylint-odoo="*"

	[requires]
	python_version = "3"
	_EOF_
	}

	PDIR=${HOME}/workspace/odoo/${args[projectname]}
	mkdir -p ${PDIR}
	cd ${PDIR}
	envrc ${args[version]} ${args[oport]} ${args[gport]}
	direnv allow >/dev/null
	mkdir -p conf backups addons
	configfile ${args[version]} ${args[edition]} ${args[projectname]}
	pipfile
	printf "To install python dev dependencies run:\npipenv install --dev\n\n"
}

# :command.function
odo_project_reset_command() {
	# src/project_reset_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		read -r -p "Are you sure you want to reset the database? [YES/N] " response
		if [[ "$response" =~ ^(YES)$ ]]; then
			read -r -p "Are you **really** sure you want to reset the database? [YES/N] " response
			if [[ "$response" =~ ^(YES)$ ]]; then
				podman stop ${POD} || echo
				podman rm -f ${POD} || echo
				podman volume rm ${POD}_data || echo
				PGPASSWORD=${args[--pass]} dropdb -U ${args[--user]} -h ${args[--host]} -p ${args[--port]} -w -f ${args[--name]} >/dev/null
				echo "Project reset"
			fi
		fi
	else
		echo "not in a project directory"
	fi

}

# :command.function
odo_repo_base_clone_command() {
	# src/repo_base_clone_command.sh
	git clone https://github.com/odoo/odoo ${ODOOBASE}/odoo
	git clone https://github.com/odoo/enterprise ${ODOOBASE}/enterprise
}

# :command.function
odo_repo_base_update_command() {
	# src/repo_base_update_command.sh
	cd ${ODOOBASE}/odoo/
	git fetch origin && git checkout $(git branch -a | grep HEAD | awk '{print $3}' | awk -F'/' '{print $2}') && git pull

	cd ${ODOOBASE}/enterprise/
	git fetch origin && git checkout $(git branch -a | grep HEAD | awk '{print $3}' | awk -F'/' '{print $2}') && git pull

}

# :command.function
odo_repo_version_clone_command() {
	# src/repo_version_clone_command.sh
	mkdir -p ${ODOOBASE}/${args[version]}
	rsync -at --inplace --delete ${ODOOBASE}/odoo/ ${ODOOBASE}/${args[version]}/odoo/
	rsync -at --inplace --delete ${ODOOBASE}/enterprise/ ${ODOOBASE}/${args[version]}/enterprise/

	cd ${ODOOBASE}/${args[version]}/odoo/
	git fetch origin && git checkout ${args[version]} && git pull

	cd ${ODOOBASE}/${args[version]}/enterprise/
	git fetch origin && git checkout ${args[version]} && git pull
}

# :command.function
odo_repo_version_update_command() {
	# src/repo_version_update_command.sh
	cd ${ODOOBASE}/${args[version]}/odoo/
	git fetch origin && git checkout ${args[version]} && git pull

	cd ${ODOOBASE}/${args[version]}/enterprise/
	git fetch origin && git checkout ${args[version]} && git pull
}

# :command.parse_requirements
parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--version | -v)
				version_command
				exit
				;;

			--help | -h)
				long_usage=yes
				odo_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.environment_variables_filter
	# :command.environment_variables_default
	export POD="${POD:-${PWD##*/}}"
	export CONTAINER="${CONTAINER:-ghcr.io/ppreeper/odoobase:main}"

	# :command.command_filter
	action=${1:-}

	case $action in
		-*) ;;

		config)
			action="config"
			shift
			odo_config_parse_requirements "$@"
			shift $#
			;;

		completions)
			action="completions"
			shift
			odo_completions_parse_requirements "$@"
			shift $#
			;;

		start)
			action="start"
			shift
			odo_start_parse_requirements "$@"
			shift $#
			;;

		stop)
			action="stop"
			shift
			odo_stop_parse_requirements "$@"
			shift $#
			;;

		restart)
			action="restart"
			shift
			odo_restart_parse_requirements "$@"
			shift $#
			;;

		logs)
			action="logs"
			shift
			odo_logs_parse_requirements "$@"
			shift $#
			;;

		scaffold)
			action="scaffold"
			shift
			odo_scaffold_parse_requirements "$@"
			shift $#
			;;

		init)
			action="init"
			shift
			odo_init_parse_requirements "$@"
			shift $#
			;;

		install)
			action="install"
			shift
			odo_install_parse_requirements "$@"
			shift $#
			;;

		upgrade)
			action="upgrade"
			shift
			odo_upgrade_parse_requirements "$@"
			shift $#
			;;

		manifest)
			action="manifest"
			shift
			odo_manifest_parse_requirements "$@"
			shift $#
			;;

		psql)
			action="psql"
			shift
			odo_psql_parse_requirements "$@"
			shift $#
			;;

		query)
			action="query"
			shift
			odo_query_parse_requirements "$@"
			shift $#
			;;

		backup)
			action="backup"
			shift
			odo_backup_parse_requirements "$@"
			shift $#
			;;

		restore)
			action="restore"
			shift
			odo_restore_parse_requirements "$@"
			shift $#
			;;

		admin)
			action="admin"
			shift
			odo_admin_parse_requirements "$@"
			shift $#
			;;

		project)
			action="project"
			shift
			odo_project_parse_requirements "$@"
			shift $#
			;;

		repo)
			action="repo"
			shift
			odo_repo_parse_requirements "$@"
			shift $#
			;;

		# :command.command_fallback
		"")
			odo_usage >&2
			exit 1
			;;

		*)
			printf "invalid command: %s\n" "$action" >&2
			exit 1
			;;

	esac

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_config_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_config_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action=${1:-}

	case $action in
		-*) ;;

		vscode)
			action="vscode"
			shift
			odo_config_vscode_parse_requirements "$@"
			shift $#
			;;

		pyright)
			action="pyright"
			shift
			odo_config_pyright_parse_requirements "$@"
			shift $#
			;;

		# :command.command_fallback
		"")
			odo_config_usage >&2
			exit 1
			;;

		*)
			printf "invalid command: %s\n" "$action" >&2
			exit 1
			;;

	esac

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_config_vscode_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_config_vscode_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="config vscode"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_config_pyright_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_config_pyright_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="config pyright"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_completions_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_completions_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action=${1:-}

	case $action in
		-*) ;;

		show)
			action="show"
			shift
			odo_completions_show_parse_requirements "$@"
			shift $#
			;;

		install)
			action="install"
			shift
			odo_completions_install_parse_requirements "$@"
			shift $#
			;;

		# :command.command_fallback
		"")
			odo_completions_usage >&2
			exit 1
			;;

		*)
			printf "invalid command: %s\n" "$action" >&2
			exit 1
			;;

	esac

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_completions_show_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_completions_show_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="completions show"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_completions_install_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_completions_install_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="completions install"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_start_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_start_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="start"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_stop_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_stop_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="stop"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_restart_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_restart_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="restart"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_logs_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_logs_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="logs"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_scaffold_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_scaffold_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="scaffold"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['module']+x} ]]; then

					args['module']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.required_args_filter
	if [[ -z ${args['module']+x} ]]; then
		printf "missing required argument: MODULE\nusage: odo scaffold MODULE\n" >&2
		exit 1
	fi

}

# :command.parse_requirements
odo_init_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_init_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="init"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in
			# :flag.case
			--name | -d)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--name']="$2"
					shift
					shift
				else
					printf "%s\n" "--name requires an argument: --name, -d NAME" >&2
					exit 1
				fi
				;;

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['modules']+x} ]]; then

					args['modules']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.default_assignments
	[[ -n ${args['modules']:-} ]] || args['modules']="base,web"
	[[ -n ${args['--name']:-} ]] || args['--name']="$(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"

}

# :command.parse_requirements
odo_install_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_install_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="install"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in
			# :flag.case
			--name | -d)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--name']="$2"
					shift
					shift
				else
					printf "%s\n" "--name requires an argument: --name, -d NAME" >&2
					exit 1
				fi
				;;

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['modules']+x} ]]; then

					args['modules']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.required_args_filter
	if [[ -z ${args['modules']+x} ]]; then
		printf "missing required argument: MODULES\nusage: odo install MODULES [OPTIONS]\n" >&2
		exit 1
	fi

	# :command.default_assignments
	[[ -n ${args['--name']:-} ]] || args['--name']="$(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"

}

# :command.parse_requirements
odo_upgrade_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_upgrade_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="upgrade"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in
			# :flag.case
			--name | -d)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--name']="$2"
					shift
					shift
				else
					printf "%s\n" "--name requires an argument: --name, -d NAME" >&2
					exit 1
				fi
				;;

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['modules']+x} ]]; then

					args['modules']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.required_args_filter
	if [[ -z ${args['modules']+x} ]]; then
		printf "missing required argument: MODULES\nusage: odo upgrade MODULES [OPTIONS]\n" >&2
		exit 1
	fi

	# :command.default_assignments
	[[ -n ${args['--name']:-} ]] || args['--name']="$(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"

}

# :command.parse_requirements
odo_manifest_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_manifest_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action=${1:-}

	case $action in
		-*) ;;

		export)
			action="export"
			shift
			odo_manifest_export_parse_requirements "$@"
			shift $#
			;;

		import)
			action="import"
			shift
			odo_manifest_import_parse_requirements "$@"
			shift $#
			;;

		remote)
			action="remote"
			shift
			odo_manifest_remote_parse_requirements "$@"
			shift $#
			;;

		# :command.command_fallback
		"")
			odo_manifest_usage >&2
			exit 1
			;;

		*)
			printf "invalid command: %s\n" "$action" >&2
			exit 1
			;;

	esac

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_manifest_export_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_manifest_export_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="manifest export"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_manifest_import_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_manifest_import_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="manifest import"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['file']+x} ]]; then

					args['file']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.default_assignments
	[[ -n ${args['file']:-} ]] || args['file']="manifest.json"

}

# :command.parse_requirements
odo_manifest_remote_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_manifest_remote_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="manifest remote"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['file']+x} ]]; then

					args['file']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.required_args_filter
	if [[ -z ${args['file']+x} ]]; then
		printf "missing required argument: FILE\nusage: odo manifest remote FILE\n" >&2
		exit 1
	fi

}

# :command.parse_requirements
odo_psql_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_psql_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="psql"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in
			# :flag.case
			--host)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--host']="$2"
					shift
					shift
				else
					printf "%s\n" "--host requires an argument: --host HOST" >&2
					exit 1
				fi
				;;

			# :flag.case
			--port)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--port']="$2"
					shift
					shift
				else
					printf "%s\n" "--port requires an argument: --port PORT" >&2
					exit 1
				fi
				;;

			# :flag.case
			--user)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--user']="$2"
					shift
					shift
				else
					printf "%s\n" "--user requires an argument: --user USERNAME" >&2
					exit 1
				fi
				;;

			# :flag.case
			--pass)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--pass']="$2"
					shift
					shift
				else
					printf "%s\n" "--pass requires an argument: --pass PASS" >&2
					exit 1
				fi
				;;

			# :flag.case
			--name)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--name']="$2"
					shift
					shift
				else
					printf "%s\n" "--name requires an argument: --name NAME" >&2
					exit 1
				fi
				;;

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

	# :command.default_assignments
	[[ -n ${args['--host']:-} ]] || args['--host']="$(grep db_host conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"
	[[ -n ${args['--port']:-} ]] || args['--port']="$(grep db_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"
	[[ -n ${args['--user']:-} ]] || args['--user']="$(grep db_user conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"
	[[ -n ${args['--pass']:-} ]] || args['--pass']="$(grep db_pass conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"
	[[ -n ${args['--name']:-} ]] || args['--name']="$(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"

}

# :command.parse_requirements
odo_query_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_query_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="query"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in
			# :flag.case
			--db_name)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--db_name']="$2"
					shift
					shift
				else
					printf "%s\n" "--db_name requires an argument: --db_name DATABASE" >&2
					exit 1
				fi
				;;

			# :flag.case
			-U)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['-U']="$2"
					shift
					shift
				else
					printf "%s\n" "-U requires an argument: -U USERNAME" >&2
					exit 1
				fi
				;;

			# :flag.case
			-P)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['-P']="$2"
					shift
					shift
				else
					printf "%s\n" "-P requires an argument: -P PASSWORD" >&2
					exit 1
				fi
				;;

			# :flag.case
			--filter)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--filter']="$2"
					shift
					shift
				else
					printf "%s\n" "--filter requires an argument: --filter FILTER" >&2
					exit 1
				fi
				;;

			# :flag.case
			--fields)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--fields']="$2"
					shift
					shift
				else
					printf "%s\n" "--fields requires an argument: --fields FIELDS" >&2
					exit 1
				fi
				;;

			# :flag.case
			--limit)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--limit']="$2"
					shift
					shift
				else
					printf "%s\n" "--limit requires an argument: --limit LIMIT" >&2
					exit 1
				fi
				;;

			# :flag.case
			--offset)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--offset']="$2"
					shift
					shift
				else
					printf "%s\n" "--offset requires an argument: --offset OFFSET" >&2
					exit 1
				fi
				;;

			# :flag.case
			--count)

				# :flag.case_no_arg
				args['--count']=1
				shift
				;;

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['model']+x} ]]; then

					args['model']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.required_args_filter
	if [[ -z ${args['model']+x} ]]; then
		printf "missing required argument: MODEL\nusage: odo query MODEL [OPTIONS]\n" >&2
		exit 1
	fi

	# :command.default_assignments
	[[ -n ${args['--db_name']:-} ]] || args['--db_name']="$(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"
	[[ -n ${args['-U']:-} ]] || args['-U']="admin"
	[[ -n ${args['-P']:-} ]] || args['-P']="admin"
	[[ -n ${args['--filter']:-} ]] || args['--filter']=""

}

# :command.parse_requirements
odo_backup_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_backup_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="backup"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_restore_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_restore_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="restore"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_repeatable

				if [[ -z ${args['file']+x} ]]; then
					args['file']="\"$1\""
					shift
				else
					args['file']="${args[file]} \"$1\""
					shift
				fi

				;;

		esac
	done

	# :command.required_args_filter
	if [[ -z ${args['file']+x} ]]; then
		printf "missing required argument: FILE\nusage: odo restore FILE...\n" >&2
		exit 1
	fi

}

# :command.parse_requirements
odo_admin_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_admin_usage
				exit
				;;

			# :flag.case
			--host)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--host']="$2"
					shift
					shift
				else
					printf "%s\n" "--host requires an argument: --host HOST" >&2
					exit 1
				fi
				;;

			# :flag.case
			--port)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--port']="$2"
					shift
					shift
				else
					printf "%s\n" "--port requires an argument: --port PORT" >&2
					exit 1
				fi
				;;

			# :flag.case
			--db_user)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--db_user']="$2"
					shift
					shift
				else
					printf "%s\n" "--db_user requires an argument: --db_user DB_USERNAME" >&2
					exit 1
				fi
				;;

			# :flag.case
			--db_pass)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--db_pass']="$2"
					shift
					shift
				else
					printf "%s\n" "--db_pass requires an argument: --db_pass DB_PASS" >&2
					exit 1
				fi
				;;

			# :flag.case
			--db_name)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--db_name']="$2"
					shift
					shift
				else
					printf "%s\n" "--db_name requires an argument: --db_name DB_NAME" >&2
					exit 1
				fi
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action=${1:-}

	case $action in
		-*) ;;

		user)
			action="user"
			shift
			odo_admin_user_parse_requirements "$@"
			shift $#
			;;

		password)
			action="password"
			shift
			odo_admin_password_parse_requirements "$@"
			shift $#
			;;

		# :command.command_fallback
		"")
			odo_admin_usage >&2
			exit 1
			;;

		*)
			printf "invalid command: %s\n" "$action" >&2
			exit 1
			;;

	esac

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

	# :command.default_assignments
	[[ -n ${args['--host']:-} ]] || args['--host']="$(grep db_host conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"
	[[ -n ${args['--port']:-} ]] || args['--port']="$(grep db_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"
	[[ -n ${args['--db_user']:-} ]] || args['--db_user']="$(grep db_user conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"
	[[ -n ${args['--db_pass']:-} ]] || args['--db_pass']="$(grep db_pass conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"
	[[ -n ${args['--db_name']:-} ]] || args['--db_name']="$(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"

}

# :command.parse_requirements
odo_admin_user_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_admin_user_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="admin user"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['admin_name']+x} ]]; then

					args['admin_name']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

}

# :command.parse_requirements
odo_admin_password_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_admin_password_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="admin password"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['admin_password']+x} ]]; then

					args['admin_password']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.required_args_filter
	if [[ -z ${args['admin_password']+x} ]]; then
		printf "missing required argument: ADMIN_PASSWORD\nusage: odo admin password ADMIN_PASSWORD\n" >&2
		exit 1
	fi

}

# :command.parse_requirements
odo_project_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_project_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.environment_variables_filter
	# :command.environment_variables_default
	export ODOOBASE="${ODOOBASE:-${HOME}/workspace/repos/odoo}"

	# :command.command_filter
	action=${1:-}

	case $action in
		-*) ;;

		init)
			action="init"
			shift
			odo_project_init_parse_requirements "$@"
			shift $#
			;;

		branch)
			action="branch"
			shift
			odo_project_branch_parse_requirements "$@"
			shift $#
			;;

		reset)
			action="reset"
			shift
			odo_project_reset_parse_requirements "$@"
			shift $#
			;;

		# :command.command_fallback
		"")
			odo_project_usage >&2
			exit 1
			;;

		*)
			printf "invalid command: %s\n" "$action" >&2
			exit 1
			;;

	esac

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_project_init_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_project_init_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.environment_variables_filter
	# :command.environment_variables_default
	export IPV4="${IPV4:-$(ip -4 -br a show | grep -v ^lo | grep UP | awk '{print $3}' | awk -F'/' '{print $1}')}"

	# :command.command_filter
	action="project init"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['edition']+x} ]]; then

					args['edition']=$1
					shift
				elif [[ -z ${args['version']+x} ]]; then

					args['version']=$1
					shift
				elif [[ -z ${args['projectname']+x} ]]; then

					args['projectname']=$1
					shift
				elif [[ -z ${args['oport']+x} ]]; then

					args['oport']=$1
					shift
				elif [[ -z ${args['gport']+x} ]]; then

					args['gport']=$1
					shift
				elif [[ -z ${args['pgport']+x} ]]; then

					args['pgport']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.required_args_filter
	if [[ -z ${args['edition']+x} ]]; then
		printf "missing required argument: EDITION\nusage: odo project init EDITION VERSION PROJECTNAME [OPORT] [GPORT] [PGPORT]\n" >&2
		exit 1
	fi
	if [[ -z ${args['version']+x} ]]; then
		printf "missing required argument: VERSION\nusage: odo project init EDITION VERSION PROJECTNAME [OPORT] [GPORT] [PGPORT]\n" >&2
		exit 1
	fi
	if [[ -z ${args['projectname']+x} ]]; then
		printf "missing required argument: PROJECTNAME\nusage: odo project init EDITION VERSION PROJECTNAME [OPORT] [GPORT] [PGPORT]\n" >&2
		exit 1
	fi

	# :command.default_assignments
	[[ -n ${args['oport']:-} ]] || args['oport']="8069"
	[[ -n ${args['gport']:-} ]] || args['gport']="8072"
	[[ -n ${args['pgport']:-} ]] || args['pgport']="5432"

	# :command.whitelist_filter
	if [[ -n ${args['edition']} ]] && [[ ! ${args['edition']} =~ ^(community|enterprise)$ ]]; then
		printf "%s\n" "edition must be one of: community, enterprise" >&2
		exit 1
	fi

}

# :command.parse_requirements
odo_project_branch_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_project_branch_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.environment_variables_filter
	# :command.environment_variables_default
	export IPV4="${IPV4:-$(ip -4 -br a show | grep -v ^lo | grep UP | awk '{print $3}' | awk -F'/' '{print $1}')}"

	# :command.command_filter
	action="project branch"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['version']+x} ]]; then

					args['version']=$1
					shift
				elif [[ -z ${args['edition']+x} ]]; then

					args['edition']=$1
					shift
				elif [[ -z ${args['projectname']+x} ]]; then

					args['projectname']=$1
					shift
				elif [[ -z ${args['branch']+x} ]]; then

					args['branch']=$1
					shift
				elif [[ -z ${args['url']+x} ]]; then

					args['url']=$1
					shift
				elif [[ -z ${args['oport']+x} ]]; then

					args['oport']=$1
					shift
				elif [[ -z ${args['gport']+x} ]]; then

					args['gport']=$1
					shift
				elif [[ -z ${args['pgport']+x} ]]; then

					args['pgport']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.required_args_filter
	if [[ -z ${args['version']+x} ]]; then
		printf "missing required argument: VERSION\nusage: odo project branch VERSION EDITION PROJECTNAME BRANCH URL [OPORT] [GPORT] [PGPORT]\n" >&2
		exit 1
	fi
	if [[ -z ${args['edition']+x} ]]; then
		printf "missing required argument: EDITION\nusage: odo project branch VERSION EDITION PROJECTNAME BRANCH URL [OPORT] [GPORT] [PGPORT]\n" >&2
		exit 1
	fi
	if [[ -z ${args['projectname']+x} ]]; then
		printf "missing required argument: PROJECTNAME\nusage: odo project branch VERSION EDITION PROJECTNAME BRANCH URL [OPORT] [GPORT] [PGPORT]\n" >&2
		exit 1
	fi
	if [[ -z ${args['branch']+x} ]]; then
		printf "missing required argument: BRANCH\nusage: odo project branch VERSION EDITION PROJECTNAME BRANCH URL [OPORT] [GPORT] [PGPORT]\n" >&2
		exit 1
	fi
	if [[ -z ${args['url']+x} ]]; then
		printf "missing required argument: URL\nusage: odo project branch VERSION EDITION PROJECTNAME BRANCH URL [OPORT] [GPORT] [PGPORT]\n" >&2
		exit 1
	fi

	# :command.default_assignments
	[[ -n ${args['oport']:-} ]] || args['oport']="8069"
	[[ -n ${args['gport']:-} ]] || args['gport']="8072"
	[[ -n ${args['pgport']:-} ]] || args['pgport']="5432"

	# :command.whitelist_filter
	if [[ -n ${args['edition']} ]] && [[ ! ${args['edition']} =~ ^(community|enterprise)$ ]]; then
		printf "%s\n" "edition must be one of: community, enterprise" >&2
		exit 1
	fi

}

# :command.parse_requirements
odo_project_reset_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_project_reset_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="project reset"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in
			# :flag.case
			--host)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--host']="$2"
					shift
					shift
				else
					printf "%s\n" "--host requires an argument: --host HOST" >&2
					exit 1
				fi
				;;

			# :flag.case
			--port)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--port']="$2"
					shift
					shift
				else
					printf "%s\n" "--port requires an argument: --port PORT" >&2
					exit 1
				fi
				;;

			# :flag.case
			--user)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--user']="$2"
					shift
					shift
				else
					printf "%s\n" "--user requires an argument: --user USERNAME" >&2
					exit 1
				fi
				;;

			# :flag.case
			--pass)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--pass']="$2"
					shift
					shift
				else
					printf "%s\n" "--pass requires an argument: --pass PASS" >&2
					exit 1
				fi
				;;

			# :flag.case
			--name)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--name']="$2"
					shift
					shift
				else
					printf "%s\n" "--name requires an argument: --name NAME" >&2
					exit 1
				fi
				;;

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

	# :command.default_assignments
	[[ -n ${args['--host']:-} ]] || args['--host']="$(grep db_host conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"
	[[ -n ${args['--port']:-} ]] || args['--port']="$(grep db_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"
	[[ -n ${args['--user']:-} ]] || args['--user']="$(grep db_user conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"
	[[ -n ${args['--pass']:-} ]] || args['--pass']="$(grep db_pass conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"
	[[ -n ${args['--name']:-} ]] || args['--name']="$(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"

}

# :command.parse_requirements
odo_repo_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_repo_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.environment_variables_filter
	# :command.environment_variables_default
	export ODOOBASE="${ODOOBASE:-${HOME}/workspace/repos/odoo}"

	# :command.command_filter
	action=${1:-}

	case $action in
		-*) ;;

		base)
			action="base"
			shift
			odo_repo_base_parse_requirements "$@"
			shift $#
			;;

		version)
			action="version"
			shift
			odo_repo_version_parse_requirements "$@"
			shift $#
			;;

		# :command.command_fallback
		"")
			odo_repo_usage >&2
			exit 1
			;;

		*)
			printf "invalid command: %s\n" "$action" >&2
			exit 1
			;;

	esac

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_repo_base_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_repo_base_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action=${1:-}

	case $action in
		-*) ;;

		clone)
			action="clone"
			shift
			odo_repo_base_clone_parse_requirements "$@"
			shift $#
			;;

		update)
			action="update"
			shift
			odo_repo_base_update_parse_requirements "$@"
			shift $#
			;;

		# :command.command_fallback
		"")
			odo_repo_base_usage >&2
			exit 1
			;;

		*)
			printf "invalid command: %s\n" "$action" >&2
			exit 1
			;;

	esac

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_repo_base_clone_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_repo_base_clone_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="repo base clone"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_repo_base_update_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_repo_base_update_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="repo base update"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_repo_version_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_repo_version_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action=${1:-}

	case $action in
		-*) ;;

		clone)
			action="clone"
			shift
			odo_repo_version_clone_parse_requirements "$@"
			shift $#
			;;

		update)
			action="update"
			shift
			odo_repo_version_update_parse_requirements "$@"
			shift $#
			;;

		# :command.command_fallback
		"")
			odo_repo_version_usage >&2
			exit 1
			;;

		*)
			printf "invalid command: %s\n" "$action" >&2
			exit 1
			;;

	esac

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_repo_version_clone_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_repo_version_clone_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="repo version clone"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['version']+x} ]]; then

					args['version']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.required_args_filter
	if [[ -z ${args['version']+x} ]]; then
		printf "missing required argument: VERSION\nusage: odo repo version clone VERSION\n" >&2
		exit 1
	fi

}

# :command.parse_requirements
odo_repo_version_update_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_repo_version_update_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="repo version update"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['version']+x} ]]; then

					args['version']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.required_args_filter
	if [[ -z ${args['version']+x} ]]; then
		printf "missing required argument: VERSION\nusage: odo repo version update VERSION\n" >&2
		exit 1
	fi

}

# :command.initialize
initialize() {
	version="0.1.0"
	long_usage=''
	set -e

	# :command.environment_variables_default
	export POD="${POD:-${PWD##*/}}"
	export CONTAINER="${CONTAINER:-ghcr.io/ppreeper/odoobase:main}"

}

# :command.run
run() {
	declare -A args=()
	declare -A deps=()
	declare -a other_args=()
	declare -a input=()
	normalize_input "$@"
	parse_requirements "${input[@]}"

	case "$action" in
		"config") odo_config_command ;;
		"config vscode") odo_config_vscode_command ;;
		"config pyright") odo_config_pyright_command ;;
		"completions") odo_completions_command ;;
		"completions show") odo_completions_show_command ;;
		"completions install") odo_completions_install_command ;;
		"start") odo_start_command ;;
		"stop") odo_stop_command ;;
		"restart") odo_restart_command ;;
		"logs") odo_logs_command ;;
		"scaffold") odo_scaffold_command ;;
		"init") odo_init_command ;;
		"install") odo_install_command ;;
		"upgrade") odo_upgrade_command ;;
		"manifest") odo_manifest_command ;;
		"manifest export") odo_manifest_export_command ;;
		"manifest import") odo_manifest_import_command ;;
		"manifest remote") odo_manifest_remote_command ;;
		"psql") odo_psql_command ;;
		"query") odo_query_command ;;
		"backup") odo_backup_command ;;
		"restore") odo_restore_command ;;
		"admin") odo_admin_command ;;
		"admin user") odo_admin_user_command ;;
		"admin password") odo_admin_password_command ;;
		"project") odo_project_command ;;
		"project init") odo_project_init_command ;;
		"project branch") odo_project_branch_command ;;
		"project reset") odo_project_reset_command ;;
		"repo") odo_repo_command ;;
		"repo base") odo_repo_base_command ;;
		"repo base clone") odo_repo_base_clone_command ;;
		"repo base update") odo_repo_base_update_command ;;
		"repo version") odo_repo_version_command ;;
		"repo version clone") odo_repo_version_clone_command ;;
		"repo version update") odo_repo_version_update_command ;;
	esac
}

initialize
run "$@"
