#!/usr/bin/env bash
# This script was generated by bashly 1.1.0 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
	printf "bash version 4 or higher is required\n" >&2
	exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
	echo "$version"
}

# :command.usage
odo_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo - Odoo Podman Tool\n"
		echo

	else
		printf "odo - Odoo Podman Tool\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo COMMAND\n"
	printf "  odo [COMMAND] --help | -h\n"
	printf "  odo --version | -v\n"
	echo
	# :command.usage_commands
	printf "%s\n" "Commands:"
	printf "  %s   additional config options\n" "config "
	printf "  %s   Start the instance\n" "start  "
	printf "  %s   Stop the instance\n" "stop   "
	printf "  %s   Restart the instance\n" "restart"
	printf "  %s   Follow the logs\n" "logs   "
	printf "  %s   initialize the database\n" "init   "
	printf "  %s   Install module(s)\n" "install"
	printf "  %s   Upgrade module(s)\n" "upgrade"
	printf "  %s   Access the raw database\n" "psql   "
	printf "  %s   Query the database\n" "query  "
	printf "  %s   Admin user management\n" "admin  "
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo
		printf "  %s\n" "--version, -v"
		printf "    Show version number\n"
		echo

		# :command.usage_environment_variables
		printf "%s\n" "Environment Variables:"

		# :environment_variable.usage
		printf "  %s\n" "POD"
		printf "    Odoo instance\n"
		printf "    Default: ${PWD##*/}\n"
		echo

	fi
}

# :command.usage
odo_config_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo config - additional config options\n"
		echo

	else
		printf "odo config - additional config options\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo config COMMAND\n"
	printf "  odo config [COMMAND] --help | -h\n"
	echo
	# :command.usage_commands
	printf "%s\n" "Commands:"
	printf "  %s   Setup vscode settings and launch json files\n" "vscode "
	printf "  %s   Setup pyright settings\n" "pyright"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

	fi
}

# :command.usage
odo_config_vscode_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo config vscode - Setup vscode settings and launch json files\n"
		echo

	else
		printf "odo config vscode - Setup vscode settings and launch json files\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo config vscode\n"
	printf "  odo config vscode --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

	fi
}

# :command.usage
odo_config_pyright_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo config pyright - Setup pyright settings\n"
		echo

	else
		printf "odo config pyright - Setup pyright settings\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo config pyright\n"
	printf "  odo config pyright --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

	fi
}

# :command.usage
odo_start_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo start - Start the instance\n"
		echo

	else
		printf "odo start - Start the instance\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo start\n"
	printf "  odo start --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  oda start\n"
		echo

	fi
}

# :command.usage
odo_stop_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo stop - Stop the instance\n"
		echo

	else
		printf "odo stop - Stop the instance\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo stop\n"
	printf "  odo stop --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  oda stop\n"
		echo

	fi
}

# :command.usage
odo_restart_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo restart - Restart the instance\n"
		echo

	else
		printf "odo restart - Restart the instance\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo restart\n"
	printf "  odo restart --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  oda stop\n"
		echo

	fi
}

# :command.usage
odo_logs_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo logs - Follow the logs\n"
		echo

	else
		printf "odo logs - Follow the logs\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo logs\n"
	printf "  odo logs --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  oda logs\n"
		echo

	fi
}

# :command.usage
odo_init_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo init - initialize the database\n"
		echo

	else
		printf "odo init - initialize the database\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo init [MODULES] [OPTIONS]\n"
	printf "  odo init --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_flags
		# :flag.usage
		printf "  %s\n" "--name, -d NAME"
		printf "    Database Name\n"
		printf "    Default: $(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "MODULES"
		printf "    comma seperated list of modules\n"
		printf "    Default: base,web\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  oda init\n"
		echo

	fi
}

# :command.usage
odo_install_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo install - Install module(s)\n"
		echo

	else
		printf "odo install - Install module(s)\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo install MODULES [OPTIONS]\n"
	printf "  odo install --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_flags
		# :flag.usage
		printf "  %s\n" "--name, -d NAME"
		printf "    Database Name\n"
		printf "    Default: $(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "MODULES"
		printf "    comma seperated list of modules\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  oda install base,web\n"
		echo

	fi
}

# :command.usage
odo_upgrade_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo upgrade - Upgrade module(s)\n"
		echo

	else
		printf "odo upgrade - Upgrade module(s)\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo upgrade MODULES [OPTIONS]\n"
	printf "  odo upgrade --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_flags
		# :flag.usage
		printf "  %s\n" "--name, -d NAME"
		printf "    Database Name\n"
		printf "    Default: $(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "MODULES"
		printf "    comma seperated list of modules\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  oda upgrade base,web\n"
		echo

	fi
}

# :command.usage
odo_psql_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo psql - Access the raw database\n"
		echo

	else
		printf "odo psql - Access the raw database\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo psql [OPTIONS]\n"
	printf "  odo psql --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_flags
		# :flag.usage
		printf "  %s\n" "--host HOST"
		printf "    Database Host\n"
		printf "    Default: $(grep db_host conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :flag.usage
		printf "  %s\n" "--port PORT"
		printf "    Database Port\n"
		printf "    Default: $(grep db_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :flag.usage
		printf "  %s\n" "--user USERNAME"
		printf "    Username\n"
		printf "    Default: $(grep db_user conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :flag.usage
		printf "  %s\n" "--pass PASS"
		printf "    Password\n"
		printf "    Default: $(grep db_pass conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :flag.usage
		printf "  %s\n" "--name NAME"
		printf "    Database Name\n"
		printf "    Default: $(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_examples
		printf "%s\n" "Examples:"
		printf "  oda psql\n"
		echo

	fi
}

# :command.usage
odo_query_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo query - Query the database\n"
		echo

	else
		printf "odo query - Query the database\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo query MODEL [OPTIONS]\n"
	printf "  odo query --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_flags
		# :flag.usage
		printf "  %s\n" "--db_name DATABASE"
		printf "    Database Name\n"
		printf "    Default: $(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :flag.usage
		printf "  %s\n" "-U USERNAME"
		printf "    Odoo username\n"
		printf "    Default: admin\n"
		echo

		# :flag.usage
		printf "  %s\n" "-P PASSWORD"
		printf "    Odoo password\n"
		printf "    Default: admin\n"
		echo

		# :flag.usage
		printf "  %s\n" "--filter FILTER"
		printf "    Model domain filter\n"
		printf "    Default: \n"
		echo

		# :flag.usage
		printf "  %s\n" "--fields FIELDS"
		printf "    Model fields to show\n"
		echo

		# :flag.usage
		printf "  %s\n" "--limit LIMIT"
		printf "    Limit on records returned\n"
		echo

		# :flag.usage
		printf "  %s\n" "--offset OFFSET"
		printf "    Offset of records returned\n"
		echo

		# :flag.usage
		printf "  %s\n" "--count"
		printf "    Count matching records\n"
		echo

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "MODEL"
		printf "    odoo model to be queried\n"
		echo

	fi
}

# :command.usage
odo_admin_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo admin - Admin user management\n"
		echo

	else
		printf "odo admin - Admin user management\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo admin [OPTIONS] COMMAND\n"
	printf "  odo admin [COMMAND] --help | -h\n"
	echo
	# :command.usage_commands
	printf "%s\n" "Commands:"
	printf "  %s   Odoo Admin username\n" "user    "
	printf "  %s   Odoo Admin password\n" "password"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_flags
		# :flag.usage
		printf "  %s\n" "--host HOST"
		printf "    Database Host\n"
		printf "    Default: $(grep db_host conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :flag.usage
		printf "  %s\n" "--port PORT"
		printf "    Database Port\n"
		printf "    Default: $(grep db_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :flag.usage
		printf "  %s\n" "--db_user DB_USERNAME"
		printf "    Username\n"
		printf "    Default: $(grep db_user conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :flag.usage
		printf "  %s\n" "--db_pass DB_PASS"
		printf "    Password\n"
		printf "    Default: $(grep db_pass conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :flag.usage
		printf "  %s\n" "--db_name DB_NAME"
		printf "    Database Name\n"
		printf "    Default: $(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')\n"
		echo

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

	fi
}

# :command.usage
odo_admin_user_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo admin user - Odoo Admin username\n"
		echo

	else
		printf "odo admin user - Odoo Admin username\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo admin user [ADMIN_NAME]\n"
	printf "  odo admin user --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "ADMIN_NAME"
		printf "    Odoo Admin username\n"
		echo

	fi
}

# :command.usage
odo_admin_password_usage() {
	if [[ -n $long_usage ]]; then
		printf "odo admin password - Odoo Admin password\n"
		echo

	else
		printf "odo admin password - Odoo Admin password\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odo admin password ADMIN_PASSWORD\n"
	printf "  odo admin password --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "ADMIN_PASSWORD"
		printf "    Odoo Admin password\n"
		echo

	fi
}

# :command.normalize_input
normalize_input() {
	local arg flags

	while [[ $# -gt 0 ]]; do
		arg="$1"
		if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
			input+=("${BASH_REMATCH[1]}")
			input+=("${BASH_REMATCH[2]}")
		elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
			input+=("${BASH_REMATCH[1]}")
			input+=("${BASH_REMATCH[2]}")
		elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
			flags="${BASH_REMATCH[1]}"
			for ((i = 0; i < ${#flags}; i++)); do
				input+=("-${flags:i:1}")
			done
		else
			input+=("$arg")
		fi

		shift
	done
}
# :command.inspect_args
inspect_args() {
	if ((${#args[@]})); then
		readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
		echo args:
		for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
	else
		echo args: none
	fi

	if ((${#other_args[@]})); then
		echo
		echo other_args:
		echo "- \${other_args[*]} = ${other_args[*]}"
		for i in "${!other_args[@]}"; do
			echo "- \${other_args[$i]} = ${other_args[$i]}"
		done
	fi

	if ((${#deps[@]})); then
		readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
		echo
		echo deps:
		for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
	fi

}

# :command.command_functions

# :command.function
odo_config_vscode_command() {
	# src/config_vscode_command.sh
	if [ -z $ODOO_PORT ]; then
		if [[ -f ".envrc" ]]; then
			export ODOO_PORT=$(grep ODOO_PORT .envrc | awk '{print $2}' | awk -F'=' '{print $2}')
		else
			export ODOO_PORT=$(grep http_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')
		fi
	fi

	function launch_json(){
	[ -z ${2} ] && export PORT=8069 || export PORT=${2}
	cat <<-_EOF_ | tee .vscode/launch.json > /dev/null
	{
		"version": "0.2.0",
		"configurations": [
			{
				"name": "Launch",
				"type": "python",
				"request": "launch",
				"stopOnEntry": false,
				"python": "\${command:python.interpreterPath}",
				"program": "\${workspaceRoot}/odoo/odoo-bin",
				"args": ["-c", "\${workspaceRoot}/conf/odoo.conf","-p","$ODOO_PORT"],
				"cwd": "\${workspaceRoot}",
				"env": {},
				"envFile": "\${workspaceFolder}/.env",
				"console": "integratedTerminal"
			}
		]
	}
	_EOF_
	}

	function settings_json(){
	[ -z ${2} ] && export PORT=8069 || export PORT=${2}
	cat <<-_EOF_ | tee .vscode/settings.json > /dev/null
	{
		"python.analysis.extraPaths": ["odoo", "enterprise"],
		"python.linting.pylintEnabled": true,
		"python.linting.enabled": true,
		"python.terminal.executeInFileDir": true,
		"python.formatting.provider": "black"
	}
	_EOF_
	}

	mkdir -p .vscode
	settings_json
	launch_json
}

# :command.function
odo_config_pyright_command() {
	# src/config_pyright_command.sh
	[ -z ${ODOO_C} ] && export ODOO_C="odoo"
	[ -z ${ODOO_E} ] && export ODOO_E="enterprise"

	cat <<-_EOF_ | tee pyrightconfig.json > /dev/null
	{
		"venvPath": ".",
		"venv": ".direnv",
		"executionEnvironments": [
			{
				"root": ".",
				"extraPaths": [
					"${ODOO_C}",
					"${ODOO_E}",
					"addons"
					]
			}
		]
	}
	_EOF_

}

# :command.function
odo_start_command() {
	# src/start_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		if [ -z $ODOO_PORT ]; then
			if [[ -f ".envrc" ]]; then
				export ODOO_PORT=$(grep ODOO_PORT .envrc | awk '{print $2}' | awk -F'=' '{print $2}')
			else
				export ODOO_PORT=$(grep http_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')
			fi
		fi
		echo podman run --rm --name ${POD} -p 8069:8069 -p 8072:8072 -v ${PWD}/conf:/opt/odoo/conf -v $ODOO_C:/opt/odoo/odoo -v $ODOO_E:/opt/odoo/enterprise -v $PWD/addons:/opt/odoo/addons -v ${PWD##*/}_data:/opt/odoo/data -d localhost/odoobase_bookworm:latest
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_stop_command() {
	# src/stop_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		echo podman stop ${PWD##*/}
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_restart_command() {
	# src/restart_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		if [ -z $ODOO_PORT ]; then
			if [[ -f ".envrc" ]]; then
				export ODOO_PORT=$(grep ODOO_PORT .envrc | awk '{print $2}' | awk -F'=' '{print $2}')
			else
				export ODOO_PORT=$(grep http_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')
			fi
		fi
		echo podman stop "${POD}"
		sleep 2
		echo podman run --rm --name ${POD} -p 8069:8069 -p 8072:8072 -v ${PWD}/conf:/opt/odoo/conf -v $ODOO_C:/opt/odoo/odoo -v $ODOO_E:/opt/odoo/enterprise -v $PWD/addons:/opt/odoo/addons -v ${PWD##*/}_data:/opt/odoo/data -d localhost/odoobase_bookworm:latest
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_logs_command() {
	# src/logs_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		podman logs -f ${PWD##*/}
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_init_command() {
	# src/init_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		if [ -z $ODOO_PORT ]; then
			if [[ -f ".envrc" ]]; then
				export ODOO_PORT=$(grep ODOO_PORT .envrc | awk '{print $2}' | awk -F'=' '{print $2}')
			else
				export ODOO_PORT=$(grep http_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')
			fi
		fi
		echo podman exec ${PWD##*/} odoo/odoo-bin --no-http --stop-after-init -i ${args[modules]}
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_install_command() {
	# src/install_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		if [ -z $ODOO_PORT ]; then
			if [[ -f ".envrc" ]]; then
				export ODOO_PORT=$(grep ODOO_PORT .envrc | awk '{print $2}' | awk -F'=' '{print $2}')
			else
				export ODOO_PORT=$(grep http_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')
			fi
		fi
		echo podman exec ${PWD##*/} odoo/odoo-bin --no-http --stop-after-init -i ${args[modules]}
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_upgrade_command() {
	# src/upgrade_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		if [ -z $ODOO_PORT ]; then
			if [[ -f ".envrc" ]]; then
				export ODOO_PORT=$(grep ODOO_PORT .envrc | awk '{print $2}' | awk -F'=' '{print $2}')
			else
				export ODOO_PORT=$(grep http_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')
			fi
		fi
		echo podman exec ${PWD##*/} odoo/odoo-bin --no-http --stop-after-init -u ${args[modules]}
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_psql_command() {
	# src/psql_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		psql postgres://${args[--user]}:${args[--pass]}@${args[--host]}:${args[--port]}/${args[--name]}
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_query_command() {
	# src/query_command.sh
	if [[ -f "./conf/odoo.conf" ]]; then
		if [ -z $ODOO_PORT ]; then
			if [[ -f ".envrc" ]]; then
				export ODOO_PORT=$(grep ODOO_PORT .envrc | awk '{print $2}' | awk -F'=' '{print $2}')
			else
				export ODOO_PORT=$(grep http_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')
			fi
		fi

		EXEC="odooquery -host localhost -port ${ODOO_PORT} -d ${args[--db_name]} -U ${args[-U]} -P ${args[-P]} -model ${args[model]}"
		[ -z ${args[--filter]} ] || EXEC="${EXEC} -filter \"${args[--filter]}\""
		[ -z ${args[--fields]} ] || EXEC="${EXEC} -fields ${args[--fields]}"
		[ -z ${args[--limit]} ] || EXEC="${EXEC} -limit ${args[--limit]}"
		[ -z ${args[--offset]} ] || EXEC="${EXEC} -offset ${args[--offset]}"
		[ -z ${args[--count]} ] || EXEC="${EXEC} -count"
		${EXEC}
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_admin_user_command() {
	# src/admin_user_command.sh
	echo "# this file is located in 'src/admin_user_command.sh'"
	echo "# code for 'odo admin user' goes here"
	echo "# you can edit it freely and regenerate (it will not be overwritten)"
	inspect_args

	if [[ -f "./conf/odoo.conf" ]]; then
		if [ -z "${args[admin_name]}" ]; then
			admin_user=$(psql postgres://${args[--db_user]}:${args[--db_pass]}@${args[--host]}:${args[--port]}/${args[--db_name]} -t -c "select login from res_users where id=2;")
			echo "Odoo Admin username: $(echo $admin_user || awk '{print $1}')"
		else
			read -r -p "Are you sure you want to change the admin username to: ${args[admin_name]} [YES/N] " response
			if [[ "$response" =~ ^(YES)$ ]]; then
			echo "changing username to: ${args[admin_name]}"
			admin_user=$(psql postgres://${args[--db_user]}:${args[--db_pass]}@${args[--host]}:${args[--port]}/${args[--db_name]} -t -c "update res_users set login='${args[admin_name]}' where id=2;")
			fi
		fi
	else
		echo "not in a project directory"
	fi
}

# :command.function
odo_admin_password_command() {
	# src/admin_password_command.sh
	echo "# this file is located in 'src/admin_password_command.sh'"
	echo "# code for 'odo admin password' goes here"
	echo "# you can edit it freely and regenerate (it will not be overwritten)"
	inspect_args

	if [[ -f "./conf/odoo.conf" ]]; then
		read -r -p "Are you sure you want to change the admin password [YES/N] " response
		if [[ "$response" =~ ^(YES)$ ]]; then
			BASE=`dirname "${0}"`
			admin_password=$(python3 -B ${BASE}/oda_db.py -p ${args[admin_password]})
			psql postgres://${args[--db_user]}:${args[--db_pass]}@${args[--host]}:${args[--port]}/${args[--db_name]} -t -c "update res_users set password='${admin_password}' where id=2;" >/dev/null
		fi
	else
		echo "not in a project directory"
	fi
}

# :command.parse_requirements
parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--version | -v)
				version_command
				exit
				;;

			--help | -h)
				long_usage=yes
				odo_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.environment_variables_filter
	# :command.environment_variables_default
	export POD="${POD:-${PWD##*/}}"

	# :command.command_filter
	action=${1:-}

	case $action in
		-*) ;;

		config)
			action="config"
			shift
			odo_config_parse_requirements "$@"
			shift $#
			;;

		start)
			action="start"
			shift
			odo_start_parse_requirements "$@"
			shift $#
			;;

		stop)
			action="stop"
			shift
			odo_stop_parse_requirements "$@"
			shift $#
			;;

		restart)
			action="restart"
			shift
			odo_restart_parse_requirements "$@"
			shift $#
			;;

		logs)
			action="logs"
			shift
			odo_logs_parse_requirements "$@"
			shift $#
			;;

		init)
			action="init"
			shift
			odo_init_parse_requirements "$@"
			shift $#
			;;

		install)
			action="install"
			shift
			odo_install_parse_requirements "$@"
			shift $#
			;;

		upgrade)
			action="upgrade"
			shift
			odo_upgrade_parse_requirements "$@"
			shift $#
			;;

		psql)
			action="psql"
			shift
			odo_psql_parse_requirements "$@"
			shift $#
			;;

		query)
			action="query"
			shift
			odo_query_parse_requirements "$@"
			shift $#
			;;

		admin)
			action="admin"
			shift
			odo_admin_parse_requirements "$@"
			shift $#
			;;

		# :command.command_fallback
		"")
			odo_usage >&2
			exit 1
			;;

		*)
			printf "invalid command: %s\n" "$action" >&2
			exit 1
			;;

	esac

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_config_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_config_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action=${1:-}

	case $action in
		-*) ;;

		vscode)
			action="vscode"
			shift
			odo_config_vscode_parse_requirements "$@"
			shift $#
			;;

		pyright)
			action="pyright"
			shift
			odo_config_pyright_parse_requirements "$@"
			shift $#
			;;

		# :command.command_fallback
		"")
			odo_config_usage >&2
			exit 1
			;;

		*)
			printf "invalid command: %s\n" "$action" >&2
			exit 1
			;;

	esac

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_config_vscode_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_config_vscode_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="config vscode"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_config_pyright_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_config_pyright_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="config pyright"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_start_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_start_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="start"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_stop_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_stop_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="stop"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_restart_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_restart_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="restart"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_logs_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_logs_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="logs"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odo_init_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_init_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="init"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in
			# :flag.case
			--name | -d)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--name']="$2"
					shift
					shift
				else
					printf "%s\n" "--name requires an argument: --name, -d NAME" >&2
					exit 1
				fi
				;;

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['modules']+x} ]]; then

					args['modules']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.default_assignments
	[[ -n ${args['modules']:-} ]] || args['modules']="base,web"
	[[ -n ${args['--name']:-} ]] || args['--name']="$(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"

}

# :command.parse_requirements
odo_install_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_install_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="install"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in
			# :flag.case
			--name | -d)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--name']="$2"
					shift
					shift
				else
					printf "%s\n" "--name requires an argument: --name, -d NAME" >&2
					exit 1
				fi
				;;

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['modules']+x} ]]; then

					args['modules']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.required_args_filter
	if [[ -z ${args['modules']+x} ]]; then
		printf "missing required argument: MODULES\nusage: odo install MODULES [OPTIONS]\n" >&2
		exit 1
	fi

	# :command.default_assignments
	[[ -n ${args['--name']:-} ]] || args['--name']="$(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"

}

# :command.parse_requirements
odo_upgrade_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_upgrade_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="upgrade"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in
			# :flag.case
			--name | -d)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--name']="$2"
					shift
					shift
				else
					printf "%s\n" "--name requires an argument: --name, -d NAME" >&2
					exit 1
				fi
				;;

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['modules']+x} ]]; then

					args['modules']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.required_args_filter
	if [[ -z ${args['modules']+x} ]]; then
		printf "missing required argument: MODULES\nusage: odo upgrade MODULES [OPTIONS]\n" >&2
		exit 1
	fi

	# :command.default_assignments
	[[ -n ${args['--name']:-} ]] || args['--name']="$(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"

}

# :command.parse_requirements
odo_psql_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_psql_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="psql"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in
			# :flag.case
			--host)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--host']="$2"
					shift
					shift
				else
					printf "%s\n" "--host requires an argument: --host HOST" >&2
					exit 1
				fi
				;;

			# :flag.case
			--port)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--port']="$2"
					shift
					shift
				else
					printf "%s\n" "--port requires an argument: --port PORT" >&2
					exit 1
				fi
				;;

			# :flag.case
			--user)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--user']="$2"
					shift
					shift
				else
					printf "%s\n" "--user requires an argument: --user USERNAME" >&2
					exit 1
				fi
				;;

			# :flag.case
			--pass)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--pass']="$2"
					shift
					shift
				else
					printf "%s\n" "--pass requires an argument: --pass PASS" >&2
					exit 1
				fi
				;;

			# :flag.case
			--name)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--name']="$2"
					shift
					shift
				else
					printf "%s\n" "--name requires an argument: --name NAME" >&2
					exit 1
				fi
				;;

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

	# :command.default_assignments
	[[ -n ${args['--host']:-} ]] || args['--host']="$(grep db_host conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"
	[[ -n ${args['--port']:-} ]] || args['--port']="$(grep db_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"
	[[ -n ${args['--user']:-} ]] || args['--user']="$(grep db_user conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"
	[[ -n ${args['--pass']:-} ]] || args['--pass']="$(grep db_pass conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"
	[[ -n ${args['--name']:-} ]] || args['--name']="$(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"

}

# :command.parse_requirements
odo_query_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_query_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="query"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in
			# :flag.case
			--db_name)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--db_name']="$2"
					shift
					shift
				else
					printf "%s\n" "--db_name requires an argument: --db_name DATABASE" >&2
					exit 1
				fi
				;;

			# :flag.case
			-U)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['-U']="$2"
					shift
					shift
				else
					printf "%s\n" "-U requires an argument: -U USERNAME" >&2
					exit 1
				fi
				;;

			# :flag.case
			-P)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['-P']="$2"
					shift
					shift
				else
					printf "%s\n" "-P requires an argument: -P PASSWORD" >&2
					exit 1
				fi
				;;

			# :flag.case
			--filter)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--filter']="$2"
					shift
					shift
				else
					printf "%s\n" "--filter requires an argument: --filter FILTER" >&2
					exit 1
				fi
				;;

			# :flag.case
			--fields)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--fields']="$2"
					shift
					shift
				else
					printf "%s\n" "--fields requires an argument: --fields FIELDS" >&2
					exit 1
				fi
				;;

			# :flag.case
			--limit)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--limit']="$2"
					shift
					shift
				else
					printf "%s\n" "--limit requires an argument: --limit LIMIT" >&2
					exit 1
				fi
				;;

			# :flag.case
			--offset)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--offset']="$2"
					shift
					shift
				else
					printf "%s\n" "--offset requires an argument: --offset OFFSET" >&2
					exit 1
				fi
				;;

			# :flag.case
			--count)

				# :flag.case_no_arg
				args['--count']=1
				shift
				;;

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['model']+x} ]]; then

					args['model']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.required_args_filter
	if [[ -z ${args['model']+x} ]]; then
		printf "missing required argument: MODEL\nusage: odo query MODEL [OPTIONS]\n" >&2
		exit 1
	fi

	# :command.default_assignments
	[[ -n ${args['--db_name']:-} ]] || args['--db_name']="$(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"
	[[ -n ${args['-U']:-} ]] || args['-U']="admin"
	[[ -n ${args['-P']:-} ]] || args['-P']="admin"
	[[ -n ${args['--filter']:-} ]] || args['--filter']=""

}

# :command.parse_requirements
odo_admin_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_admin_usage
				exit
				;;

			# :flag.case
			--host)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--host']="$2"
					shift
					shift
				else
					printf "%s\n" "--host requires an argument: --host HOST" >&2
					exit 1
				fi
				;;

			# :flag.case
			--port)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--port']="$2"
					shift
					shift
				else
					printf "%s\n" "--port requires an argument: --port PORT" >&2
					exit 1
				fi
				;;

			# :flag.case
			--db_user)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--db_user']="$2"
					shift
					shift
				else
					printf "%s\n" "--db_user requires an argument: --db_user DB_USERNAME" >&2
					exit 1
				fi
				;;

			# :flag.case
			--db_pass)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--db_pass']="$2"
					shift
					shift
				else
					printf "%s\n" "--db_pass requires an argument: --db_pass DB_PASS" >&2
					exit 1
				fi
				;;

			# :flag.case
			--db_name)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--db_name']="$2"
					shift
					shift
				else
					printf "%s\n" "--db_name requires an argument: --db_name DB_NAME" >&2
					exit 1
				fi
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action=${1:-}

	case $action in
		-*) ;;

		user)
			action="user"
			shift
			odo_admin_user_parse_requirements "$@"
			shift $#
			;;

		password)
			action="password"
			shift
			odo_admin_password_parse_requirements "$@"
			shift $#
			;;

		# :command.command_fallback
		"")
			odo_admin_usage >&2
			exit 1
			;;

		*)
			printf "invalid command: %s\n" "$action" >&2
			exit 1
			;;

	esac

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

	# :command.default_assignments
	[[ -n ${args['--host']:-} ]] || args['--host']="$(grep db_host conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"
	[[ -n ${args['--port']:-} ]] || args['--port']="$(grep db_port conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"
	[[ -n ${args['--db_user']:-} ]] || args['--db_user']="$(grep db_user conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"
	[[ -n ${args['--db_pass']:-} ]] || args['--db_pass']="$(grep db_pass conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"
	[[ -n ${args['--db_name']:-} ]] || args['--db_name']="$(grep db_name conf/odoo.conf | awk -F'=' '{print $2}' | tr -d '[:space:]')"

}

# :command.parse_requirements
odo_admin_user_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_admin_user_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="admin user"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['admin_name']+x} ]]; then

					args['admin_name']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

}

# :command.parse_requirements
odo_admin_password_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odo_admin_password_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="admin password"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['admin_password']+x} ]]; then

					args['admin_password']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.required_args_filter
	if [[ -z ${args['admin_password']+x} ]]; then
		printf "missing required argument: ADMIN_PASSWORD\nusage: odo admin password ADMIN_PASSWORD\n" >&2
		exit 1
	fi

}

# :command.initialize
initialize() {
	version="0.1.0"
	long_usage=''
	set -e

	# :command.environment_variables_default
	export POD="${POD:-${PWD##*/}}"

}

# :command.run
run() {
	declare -A args=()
	declare -A deps=()
	declare -a other_args=()
	declare -a input=()
	normalize_input "$@"
	parse_requirements "${input[@]}"

	case "$action" in
		"config") odo_config_command ;;
		"config vscode") odo_config_vscode_command ;;
		"config pyright") odo_config_pyright_command ;;
		"start") odo_start_command ;;
		"stop") odo_stop_command ;;
		"restart") odo_restart_command ;;
		"logs") odo_logs_command ;;
		"init") odo_init_command ;;
		"install") odo_install_command ;;
		"upgrade") odo_upgrade_command ;;
		"psql") odo_psql_command ;;
		"query") odo_query_command ;;
		"admin") odo_admin_command ;;
		"admin user") odo_admin_user_command ;;
		"admin password") odo_admin_password_command ;;
	esac
}

initialize
run "$@"
